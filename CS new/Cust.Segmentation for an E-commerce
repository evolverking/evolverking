{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"58KQpFHPnek8","executionInfo":{"status":"ok","timestamp":1727946822927,"user_tz":-330,"elapsed":75095,"user":{"displayName":"SUDHARSAN S 221501149","userId":"08692232451947957919"}},"outputId":"d259f7df-2f90-418f-bfea-65f6d93d7c58"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-2-060b8994bfe4>:13: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_cleaned['TotalPrice'] = data_cleaned['Quantity'] * data_cleaned['UnitPrice']\n","<ipython-input-2-060b8994bfe4>:16: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_cleaned['InvoiceDate'] = pd.to_datetime(data_cleaned['InvoiceDate'])\n"]},{"output_type":"stream","name":"stdout","text":["            Recency  Frequency  Monetary  Cluster\n","CustomerID                                       \n","12346.0         325          2      0.00        1\n","12347.0           1        182   4310.00        0\n","12348.0          74         31   1797.24        0\n","12349.0          18         73   1757.55        0\n","12350.0         309         17    334.40        1\n"]}],"source":["import pandas as pd\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.cluster import KMeans\n","\n","# Load the dataset\n","file_path = 'Online Retail.xlsx'  # Replace with your dataset path\n","data = pd.read_excel(file_path)\n","\n","# Drop rows with missing CustomerID\n","data_cleaned = data.dropna(subset=['CustomerID'])\n","\n","# Create a 'TotalPrice' column for Monetary value (Quantity * UnitPrice)\n","data_cleaned['TotalPrice'] = data_cleaned['Quantity'] * data_cleaned['UnitPrice']\n","\n","# Convert InvoiceDate to datetime\n","data_cleaned['InvoiceDate'] = pd.to_datetime(data_cleaned['InvoiceDate'])\n","\n","# Define the most recent date in the dataset to calculate Recency\n","current_date = data_cleaned['InvoiceDate'].max()\n","\n","# Group by 'CustomerID' to calculate RFM metrics\n","rfm_table = data_cleaned.groupby('CustomerID').agg({\n","    'InvoiceDate': lambda x: (current_date - x.max()).days,  # Recency\n","    'InvoiceNo': 'count',                                    # Frequency\n","    'TotalPrice': 'sum'                                      # Monetary\n","})\n","\n","# Rename columns for clarity\n","rfm_table.rename(columns={'InvoiceDate': 'Recency', 'InvoiceNo': 'Frequency', 'TotalPrice': 'Monetary'}, inplace=True)\n","\n","# Standardize the data\n","scaler = StandardScaler()\n","rfm_scaled = scaler.fit_transform(rfm_table)\n","\n","# Apply K-means clustering\n","kmeans = KMeans(n_clusters=4, random_state=42)  # You can adjust number of clusters\n","rfm_table['Cluster'] = kmeans.fit_predict(rfm_scaled)\n","\n","# Display the first few rows of the resulting RFM table with clusters\n","print(rfm_table.head())\n","\n","# Save the resulting table to a CSV file\n","rfm_table.to_csv('customer_segmentation.csv')\n"]}]}